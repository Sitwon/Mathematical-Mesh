<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">

  <!--
   Wix config based on code originally from
   https://helgeklein.com/blog/2014/09/real-world-example-wix-msi-application-installer/
   -->

  <!--
      ====================================================================================
      Defines & Variables
   -->

  <!-- Full version number to display -->
  <?define VersionNumber="!(bind.FileVersion.MeshClient.exe)" ?>

  <!--
   Upgrade code HAS to be the same for all updates.
   Once you've chosen it don't change it.
   -->
  <?define UpgradeCode="8125999f-99e2-44a9-833c-bfa0b36f9cfb" ?>

  <!-- The URL for add/remove programs -->
  <?define InfoURL="https://prismproof.org/" ?>

  <!-- 32-bit / 64-bit variables -->
  <!--
  <?if $(var.Platform) = x64 ?>
  <?define PlatformProgramFilesFolder = "ProgramFiles64Folder" ?>  
  <?else ?>

  <?define Win64 = "no" ?>  
  <?endif ?>
  -->

  <?define Win64 = "yes" ?>

  <?define PlatformProgramFilesFolder = "ProgramFilesFolder" ?>
  <?define MeshClientSourcePath = "$(var.ProjectDir)..\Distribution\Release\bin\MeshClient.exe" ?>
  <?define MeshConnectSourcePath = "$(var.ProjectDir)..\Distribution\Release\bin\MeshConnect.exe" ?>
  <!--
      ====================================================================================
      Package start
   -->

  <!-- The upgrade code must never change as long as the product lives! -->
  <!-- Product IDs must be autogenerated (*) or else major upgrades will not work -->
  <Product Id="*" Name="!(loc.ApplicationName)" Language="!(loc.Language)" 
           Version="$(var.VersionNumber)" Manufacturer="!(loc.ManufacturerFullName)" UpgradeCode="$(var.UpgradeCode)" >

    <!-- Package IDs are valid for a single package version only - they are autogenerated by WiX -->
    <!-- Let's require Windows Installer 4.0 (included in Vista) -->
    <!-- And ALWAYS install per machine!!! -->
    <Package Id="*" InstallerVersion="400" Compressed="yes" InstallScope="perMachine"  
             Description="!(loc.ProductDescription)" Comments="!(loc.Comments) $(var.VersionNumber)" />

    <!-- License agreement text: dummy. Real text is set in WXS file -->
    <WixVariable Id="WixUILicenseRtf" Value="dummy" />

    <!-- UI customization -->
    <WixVariable Id="WixUIBannerBmp" Value="images\BannerTop.bmp" />
    <WixVariable Id="WixUIDialogBmp" Value="images\Dialog.bmp" />

    <!-- Define icons (ID should not be longer than 18 chars and must end with ".exe") -->
    <Icon Id="Icon.exe" SourceFile="images\app.ico" />

    <!-- Set properties for add/remove programs -->
    <Property Id="ARPPRODUCTICON" Value="Icon.exe" />
    <Property Id="ARPHELPLINK" Value="$(var.InfoURL)" />
    <Property Id="ARPNOREPAIR" Value="yes" Secure="yes" />
    <!-- Remove repair -->
    <Property Id="ARPNOMODIFY" Value="yes" Secure="yes" />
    <!-- Remove modify -->

    <!-- Upgrade logic -->
    <!-- AllowSameVersionUpgrades -> Always upgrade, never allow two versions to be installed next to each other -->
    <!-- AllowSameVersionUpgrades causes ICE61 which must be ignored -->
    <MajorUpgrade DowngradeErrorMessage="!(loc.NewerInstalled)" AllowSameVersionUpgrades="yes" />

    <!-- This is the main installer sequence run when the product is actually installed -->
    <InstallExecuteSequence>

      <!-- Determine the install location after the install path has been validated by the installer -->
      <Custom Action="SetARPINSTALLLOCATION" After="InstallValidate"></Custom>

    </InstallExecuteSequence>

    <!-- Set up ARPINSTALLLOCATION property (http://blogs.technet.com/b/alexshev/archive/2008/02/09/from-msi-to-wix-part-2.aspx) -->
    <CustomAction Id="SetARPINSTALLLOCATION" Property="ARPINSTALLLOCATION" Value="[INSTALLDIR]" />

    <!-- 
         Launch conditions
 
         1. Check minimum OS version 
            If not, the installation is aborted.
            By doing the (Installed OR ...) property means that this condition will only be evaluated if the app is being installed and not on uninstall or changing
 
            Note: Under a Product element, a condition becomes a LaunchCondition entry. 
      -->
    <Condition Message="!(loc.OS2Old)">
      <![CDATA[Installed OR (VersionNT >= 600)]]>
    </Condition>

    <!-- 
         2. Check OS bitness
            Unfortunately 32-bit MSI packages cannot write to 64-bit ProgramFiles directory. That is the only reason we need separate MSIs for 32-bit and 64-bit.
      -->

    <!--
    <?if $(var.Platform) = x64 ?>
    <Condition Message="!(loc.x86VersionRequired)">
      <![CDATA[VersionNT64]]>
    </Condition>
    <?endif?>
    <?if $(var.Platform) = x86 ?>
    <Condition Message="!(loc.x64VersionRequired)">
      <![CDATA[NOT VersionNT64]]>
    </Condition>
    <?endif?>
    -->
    <!-- 
         Launch conditions end
      -->

    <!-- Save the command line value INSTALLDIR and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
    <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
    <CustomAction Id='SaveCmdLineValueINSTALLDIR' Property='CMDLINE_INSTALLDIR' Value='[INSTALLDIR]' Execute='firstSequence' />
    <CustomAction Id='SetFromCmdLineValueINSTALLDIR' Property='INSTALLDIR' Value='[CMDLINE_INSTALLDIR]' Execute='firstSequence' />
    <InstallUISequence>
      <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
      <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallUISequence>
    <InstallExecuteSequence>
      <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
      <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallExecuteSequence>

    <!-- Determine the directory of a previous installation (if one exists). If not INSTALLDIR stays empty -->
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="DetermineInstallLocation" Type="raw" Root="HKLM" Key="Software\!(loc.ManufacturerName)\InstalledProducts\!(loc.ApplicationName)" Name="InstallLocation" />
    </Property>

    <!--
         ====================================================================================
         Start to build directory structure
      -->

    <!-- We do not have more than one medium (Floppy, CD, ...). Everything in one file. -->
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />

    <!-- Outermost folder (kind of virtual). Fixed entry. -->
    <Directory Id="TARGETDIR" Name="SourceDir">

      <!-- We start building our directory structure here -->
      <!-- "ProgramFilesFolder" is a variable containing the absolute path. -->
      <!-- For a list of folder variables, see: http://msdn.microsoft.com/en-us/library/aa372057%28VS.85%29.aspx -->
      <Directory Id="$(var.PlatformProgramFilesFolder)">

        <!-- All folders from here on are relative to their parent. -->

        <Directory Id="ProgramFiles" Name="!(loc.ManufacturerName)">

          <!-- INSTALLDIR is a property name. We need it later for the UI (to be able to change the install dir. -->
          <Directory Id="INSTALLDIR" Name="!(loc.ApplicationName)">

            <!-- Installation directory as a component so it can be emptied during uninstall (by default files added by someone other than Windows Installer are not removed) -->
            <Component Id="INSTALLDIR_comp" Guid="9350FA5B-6BAA-44EA-A1A5-1516D0BD8C99">
              <CreateFolder />
              <RemoveFile Id="RemoveFilesFromAppDirectory" Name="*.*" On="uninstall" />
            </Component>

          </Directory>
        </Directory>
        
        <!-- The Directory structure for the start menu (Obsolete for Windows 8.1 on.) -->
        <Directory Id="ProgramMenuFolder">
          <Directory Id="ApplicationProgramsFolder" Name="Mathematical Mesh">
     
          </Directory>        
        </Directory>        
      </Directory>
      
      <!-- Registry entries -->
      <Component Id="RegValInstallLocation_comp" Guid="A28AE64A-C8E4-4DD8-A2B8-5AEE408C78C2">
        <!-- Do NOT use the application's default registry key here, because THIS key will be removed on uninstall
                 (important when installing a newer version, because that is uninstall followed by install) -->
        <RegistryKey Root="HKLM" Key="Software\!(loc.ManufacturerName)\InstalledProducts\!(loc.ApplicationName)">
          <RegistryValue Name="InstallLocation" Value="[INSTALLDIR]" Type="string" KeyPath="yes" />
        </RegistryKey>
      </Component>

    </Directory>

    <!-- The list of component entries goes here -->
    <DirectoryRef Id="INSTALLDIR">
      <!-- Main program file -->
      <Component Id="MeshClient.exe_comp" Guid="*">
        <File Source="$(var.MeshClientSourcePath)" Id="MeshClient.exe" KeyPath="yes" />
      </Component>

      <!-- Main program file -->
      <Component Id="MeshConnect.exe_comp" Guid="*">
        <File Source="$(var.MeshConnectSourcePath)" Id="MeshConnect.exe" KeyPath="yes" />
      </Component>

    </DirectoryRef>

    <!-- The list of shortcut entries goes here These are all one component right now -->
    <DirectoryRef Id="ApplicationProgramsFolder">
      <Component Id="MeshShortcuts_comp" Guid="FE5BE2E0-FBE6-4CC1-B9FB-EF167B1F8560">
        <Shortcut Id="MeshClientMenuShortcut"
              Name="Mesh Profile Manager"
              Description="Profile manager for Mathematical Mesh"
              Target="[#MeshClient.exe]"
              WorkingDirectory="INSTALLDIR"
              Icon="Icon.exe"/>
        <Shortcut Id="MeshConnectMenuShortcut"
              Name="Mesh Connect Tool"
              Description="Connection tool for Mathematical Mesh"
              Target="[#MeshConnect.exe]"
              WorkingDirectory="INSTALLDIR"
              Icon="Icon.exe"/>
        <RemoveFolder Id="ApplicationProgramsFolder" On="uninstall"/>
        <RegistryValue Root="HKCU" Key="Software\Comodo\Mesh\Shortcuts" 
                       Name="installed" Type="integer" Value="1" KeyPath="yes"/>
      </Component>      
      
    </DirectoryRef>
    
    
    <!--
         End of directory structure
         ====================================================================================
      -->

    <!-- Features define which parts of the application can be installed in a custom installation -->
    <Feature Id="Complete" Title="!(loc.ApplicationName)" 
             Description="!(loc.FeatureCompleteDescription)" Display="expand" Level="1" 
             ConfigurableDirectory="INSTALLDIR">

      <!-- A feature block for the main (GUI) program and all its dependencies -->
      <Feature Id="MainProgram" Title="!(loc.FeatureMainProgramTitle)" 
               Description="!(loc.FeatureMainProgramDescription)" Level="1">
        <ComponentRef Id="INSTALLDIR_comp" />
        <ComponentRef Id="MeshClient.exe_comp" />
        <ComponentRef Id="MeshConnect.exe_comp" />
        <!-- Start Menu Shortcuts -->
        <ComponentRef Id="MeshShortcuts_comp" />
        <!-- Registry entries -->
        <ComponentRef Id="RegValInstallLocation_comp" />
      </Feature>

    </Feature>
  </Product>

</Wix>