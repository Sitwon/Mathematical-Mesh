<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography.Framework</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.Framework.AesBlock">
            <summary>
            AES block encryption/decryption transform. This is used in the AES Key wrap and
            other routines to wrap the block encryption provided at the platform level.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.AesBlock.BlockSize">
            <summary>
            Return the block size in bits.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.AesBlock.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Key">Key</param>
            <param name="Encrypt">If true, encrypt, otherwise decrypt</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.AesBlock.Factory(System.Byte[],System.Boolean)">
            <summary>
            Factory method
            </summary>
            <param name="Key">The key to initialize the method</param>
            <param name="Encrypt">If true, create an encryptor, if false, create a decryptor.</param>
            <returns>The block provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.AesBlock.Process(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypt or decrypt a single block of data under the specified key
            </summary>
            <param name="Input">Input byte array</param>
            <param name="InputOffset">Read offset in input array.</param>
            <param name="Output">Output byte array</param>
            <param name="OutputOffset">Write offset in output array.</param>
        </member>
        <member name="T:Goedel.Cryptography.Framework.ExtensionMethods">
            <summary>
            A general parking ground for methods converting from platform to
            portable structures.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.RSAPrivateKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create PKIX RSAPrivateKey from RSAParameters structure.
            </summary>
            <param name="RSAParameters">The RSA Parameters in .NET format.</param>
            <returns>The private key in Goedel format.</returns> 
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.RSAParameters(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Convert PKIX RSAPrivateKey to RSAParameters structure.
            </summary>
            <param name="RSAPrivateKey">RSA key  in System.Security.Cryptography form</param>
            <returns>The RSA parameters in PKIX format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.RSAPublicKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create PKIX RSAPublicKey from RSAParameters structure.
            </summary>
            <param name="RSAParameters">Input parameters  in System.Security.Cryptography form</param>
            <returns>The public key in Goedel format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.RSAParameters(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Convert PKIX RSAPublicKey to RSAParameters structure.
            </summary>
            <param name="RSAPublicKey">The RSA public key</param>
            <returns>The RSA parameters in System.Security.Cryotography. format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.KeyPair(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Create Keypair from System.Security.Cryotography.AsymmetricAlgorithm provider
            </summary>
            <param name="AsymmetricAlgorithm">The algorithm crypto provider</param>
            <returns>Crypto provider wrapping the specified key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.Certificate(System.Byte[])">
            <summary>
            Convert binary data to portable certificate.
            </summary>
            <param name="Data">Input data</param>
            <returns>The certificate</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.TBSCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a TBSCertificate item from a X509Certificate2 object.
            </summary>
            <param name="X509Cert">The X509 certificate to form TBS certificate from</param>
            <returns>The TBS certificate structure</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.AlgorithmIdentifier(System.Security.Cryptography.Oid)">
            <summary>
            Convert .NET OID to portable OID
            </summary>
            <param name="Oid">OID structure in System.Security.Cryptography form</param>
            <returns>Portable OID structure</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.Names(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
            <summary>
            Convert .NET Distinguished Name to portable list of names.
            </summary>
            <remarks>NOT IMPLEMENTED STUB</remarks>
            <param name="DN">Distinguished Name in System.Security.Cryptography form</param>
            <returns>Portable list of Names.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.ExtensionMethods.Extension(System.Security.Cryptography.X509Certificates.X509Extension)">
            <summary>
            Convert .NET extension to portable extensions 
            </summary>
            <remarks>NOT IMPLEMENTED STUB</remarks>
            <param name="X509Extension">The X509 extension in System.Security.Cryptography form</param>
            <returns>Portable extension representation.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Framework.Container">
            <summary>
            Utility class for addressing containers.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.Container.PrefixTest">
            <summary>
            Prefix for test containers
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.Container.PrefixProduction">
            <summary>
            Prefix for production containers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.Container.Prefix">
            <summary>
            Container prefix
            </summary>
            <returns>The container prefix</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.Container.Name(System.String)">
            <summary>
            Generate a key container name from a UDF fingerprint.
            </summary>
            <param name="UDF">UDF fingerprint value.</param>
            <returns>The container name.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA">
            <summary>
            Provider for RSA encryption.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.KeyPair">
            <summary>
            Return the key as a RSAKeyPair;
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Provider">
            <summary>
            The wrapped provider class.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.KeySize">
            <summary>
            The default key size
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.UDF">
            <summary>
            The key fingerprint.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.OAEP">
            <summary>
            If true (default), OAEP padding will be used. If false, deprecated PKCS#1.5 
            padding is used.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.#ctor(System.Int32)">
            <summary>
            Return a provider with the specified key size.
            </summary>
            <param name="KeySize">Key length in bits.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.#ctor(Goedel.Cryptography.Framework.RSAKeyPair)">
            <summary>
            Create an instance of the RSA crypto provider.
            </summary>
            <param name="RSAKeyPair">RSAKeyPair to use.</param>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Generate(Goedel.Cryptography.KeySecurity,System.Int32)">
            <summary>
            Generate a new RSA Key Pair with the Key size specified when the 
            instance was created.
            </summary>
            <param name="KeySecurity">The key security mode</param>
            <param name="Size">The key size (2048 or 4096), if zero the default is used.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.FindLocal(System.String)">
            <summary>
            Locate private key in local key store.
            </summary>
            <param name="UDF">Fingerprint of key</param>
            <returns>true if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Encrypt(Goedel.Cryptography.CryptoData,Goedel.Cryptography.CryptoAlgorithmID,System.Boolean)">
            <summary>
            Encrypt the bulk key.
            </summary>
            <param name="Data">The bulk key to encrypt</param>
            <param name="Algorithm">Composite encryption algorithm.</param>
            <param name="Wrap">If true create a new CryptoData instance that
            wraps the parameters supplied in Data.</param> 
            <returns>Cryptographic provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSA.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult)">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (unused in RSA)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial result for use in recryption (ignored)</param>
            <returns>The decoded data instance</returns>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderExchangeRSAPKCS">
            <summary>
            Deprecated implementation of RSA. For compatibility only.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderExchangeRSAPKCS.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderExchangeRSAPKCS.#ctor(System.Int32)">
            <summary>
            RSA provider that defaults to the PKCS#1.5 padding. For compatibility use only.
            </summary>
            <param name="KeySize">The key size in bits. Note that implementations are only
            required to support 2048 and 4096 bits.</param>
        </member>
        <member name="T:Goedel.Cryptography.Framework.Factory">
            <summary>
            Formatting class for representing RSA Public Keys in ASN.1 and
            calculating the PKIX keyinfo version of the UDF fingerprint.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.Factory.RSAPublicKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create instance from RSAParameters structure.
            </summary>
            <param name="RSAParameters">Input parameters in System.Security.Cryotography format</param>
            <returns>The public key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderAuthentication">
            <summary>
            Provider for bulk authentication algorithms (e.g. HMAC-SHA256).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderAuthentication.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.CryptoProviderAuthentication.KeyedHashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderAuthentication.Key">
            <summary>
            Authentication key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderAuthentication.#ctor(System.Security.Cryptography.KeyedHashAlgorithm)">
            <summary>
            Initializes an instance of the hash provider with the specified
            implementation.
            </summary>
            <param name="KeyedHashAlgorithm">The hash algorithm to construct provider for.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderAuthentication.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="Bulk">The bulk provider to use. If specified, the parameters from
            the specified provider will be used. Otherwise a new bulk provider will 
            be created and returned as part of the result.</param>
            <param name="OutputStream">Output stream</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderAuthentication.MakeAuthenticator(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderAuthentication.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderAuthentication.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Offset">Offset within array</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256">
            <summary>
            Provider for HMAC SHA-2 256 bits.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_256.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512">
            <summary>
            Provider for HMAC SHA-2 512 bits.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.Factory(System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Factory method for provider.
            </summary>
            <param name="KeySize">The key size (ignored)</param>
            <param name="Ignore">The cryptographic algorithn (ignored)</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderHMACSHA2_512.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderDigest">
            <summary>
            <para>Base class for all cryptographic hash providers.</para>
            
            <para>Provides utility and convenience functions that are employed in derived
            classes. This provides consistency when using either the built in .NET
            providers or those from other sources.</para>
            
            <para>Unlike the .NET API, the wrapper provider completely conceals the details 
            of the cryptographic algorithm implementation. It is not necessary to 
            observe block boundaries when using the TransformData methods.</para>
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.CryptoProviderDigest.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes an instance of the hash provider with the specified
            implementation.
            </summary>
            <param name="HashAlgorithm">Digest algorithm to construct from</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this set of providers to the specified catalog.
            </summary>
            <param name="Catalog">Catalog to register the providers to</param>
            <returns>Registration for the preferred provider (SHA-2-512)</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">Ignored</param>
            <param name="Bulk">Ignored</param>
            <param name="OutputStream">Output stream. Data written to the input 
            stream is written to the output without modification. This permits
            multiple digest values to be calculated simultaneously.</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderDigest.Truncate">
            <summary>
            Truncation length. If this value is greater than 0, the output size is 
            truncated to the nearest integer multiple of 8 bits.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Offset">Offset within array</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderDigest.Complete(Goedel.Cryptography.CryptoData)">
            <summary>
            Complete processing at the end of an encoding or decoding operation
            </summary>
            <param name="CryptoData">Structure to write result to</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoDataEncoderDigest.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoProviderBulk)">
            <summary>
            Default constructor
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="Bulk">Provider to use to process the bulk data
            signature operations where the asymmetric operation is performed after the
            bulk operation completes. </param> 
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoDataEncoderDigest.Complete">
            <summary>
            Close the crypto stream and get the digest value.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderSHA2_256">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA2_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA2_256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA2_256.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA2_256.#ctor">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderSHA2_512">
            <summary>
            Provider for the SHA-2 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA2_512.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA2_512.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA2_512.#ctor(System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
            <param name="KeySize">Key size.</param>
            <param name="ID">Cryptgraphic algorithm.</param>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderSHA1">
            <summary>
            Provider for the SHA-1 Hash algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA1.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA1.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA1.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSHA1.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSHA1.#ctor">
            <summary>
            Create a SHA-1 digest provider.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderEncryption">
            <summary>
            Provider for bulk encryption algorithms (e.g. AES).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryption.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryption.Provider">
            <summary>
            The .NET cryptographic provider (for use by sub classes).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryption.KeySize">
            <summary>
            The size of the required key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryption.IVSize">
            <summary>
            The size of the required IV. If zero, no IV is required.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.CryptoProviderEncryption.AppendIV">
            <summary>
            If set to true, the initialization vector (if used) will be prepended to the
            beginning of the output byte stream.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Framework.CryptoProviderEncryption.AppendIntegrity">
            <summary>
            If set to true, the authentication code (if created) will be appended to the
            end of the output byte stream.
            
            Since we don't currently have a GCM mode, this isn't currently used.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
             <summary>
             Constructor for initializing a delegate class.
             </summary>
             <param name="SymmetricAlgorithm">Cryptographic provider.</param>
             <param name="KeySize">Key size in bits.</param>
             <param name="CipherMode">Cipher mode to use</param>
            <param name="PaddingMode">Padding mode to use</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="Bulk">The bulk provider to use. If specified, the parameters from
            the specified provider will be used. Otherwise a new bulk provider will 
            be created and returned as part of the result.</param>
            <param name="OutputStream">Output stream</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.MakeEncryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.MakeDecryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create a decoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.BindDecoder(Goedel.Cryptography.CryptoDataDecoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Decoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryption.Complete(Goedel.Cryptography.CryptoData)">
            <summary>
            Complete processing at the end of an encoding or decoding operation
            </summary>
            <param name="CryptoData">Last data.</param>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderEncryptAES">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryptAES.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryptAES.BlockSize">
            <summary>Return the block size in bits</summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryptAES.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderEncryptAES.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderEncryptAES.#ctor(System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create an AES provider with the specified key size and mode.
            </summary>
            <param name="KeySize">Key Size in bits.</param>
            <param name="CipherMode">The cipher mode to use (CBC or CTS).</param>
            <param name="PaddingMode">The Padding Mode to use (PKCS or None).</param>
        </member>
        <member name="T:Goedel.Cryptography.Framework.RSAKeyPair">
            <summary>
            RSA Key Pair
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.AsymmetricAlgorithm">
            <summary>
            Return the underlying .NET cryptographic provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.PKIXPrivateKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.PKIXPublicKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.PKIXPrivateKeyRSA">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.PKIXPublicKeyRSA">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.SignatureProvider(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Stub method to return a signature provider. This provider does not implement
            signature and so always returns null. 
            </summary>
            <param name="ID">The algorithms to use, if set to  CryptoAlgorithmID.Default,
            the default algorithm for the key type is used.</param> 
            <returns>The signature provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.ExchangeProvider(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Returns an encryption provider for the key (if the public portion is available)
            </summary>
            <param name="ID">The algorithms to use, if set to  CryptoAlgorithmID.Default,
            the default algorithm for the key type is used.</param>
            <returns>The provider</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.Provider">
            <summary>
            The Windows RSA provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.FindLocal(System.String)">
            <summary>
            Find a KeyPair with the specified container fingerprint in the local key store.
            </summary>
            <param name="UDF">Fingerprint of key.</param>
            <returns>RSAKeyPair</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.SignatureAlgorithmID(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the CryptoAlgorithmID that would be used with the specified base parameters.
            </summary>
            <param name="Base">The base algorithm</param>
            <returns>The computed CryptoAlgorithmID</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.KeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the public key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.RSAKeyPair.PrivateKeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the private key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(Goedel.Cryptography.KeySecurity,System.Int32)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="KeySecurity">The key security mode</param>
            <param name="KeySize">Size of key in multiples of 64 bits.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(System.Int32)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="KeySize">Size of key in multiples of 64 bits.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(System.Int32,System.Boolean)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="KeySize">Size of key in multiples of 64 bits.</param>
            <param name="Exportable">If true, key may be exported, otherwise machine bound.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(System.String)">
            <summary>
            Create a new KeyPair with the specified container fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Generate a KeyPair from a .NET Provider.
            </summary>
            <param name="RSACryptoServiceProvider">The platform cryptographic provider.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="RSAParameters">The RSA parameters.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.#ctor(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.KeyPairPublicFactory(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="PKIXParameters">The parameters to construct from</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.KeyPairPrivateFactory(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="PKIXParameters">The parameters to construct from</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.Persist(Goedel.Cryptography.KeySecurity)">
            <summary>
            Makes a key persistent on the local machine with the specified level of
            protection.
            </summary>
            <param name="KeySecurity">Key protection level to be applied.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.PlatformLocateRSAProvider(System.String)">
            <summary>
            Locate a key stored in the platform cryptographic key store.
            </summary>
            <param name="UDF"></param>
            <returns>cryptographic provider matching the specified fingerprint</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.GetPrivate">
            <summary>
            Retrieve the private key from local storage.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.RSAKeyPair.EraseFromDevice">
            <summary>
            Erase the key from the local machine
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA">
            <summary>
            Provider for RSA Signature class.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.KeyPair">
            <summary>
            Return the provider key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.KeySize">
            <summary>
            The default key size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.#ctor(System.Int32)">
            <summary>
            Create an instance of the RSA crypto provider.
            </summary>
            <param name="KeySize">Default key size.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.#ctor(System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create an instance of the RSA crypto provider with specified 
            default key size and digest algorithm.
            </summary>
            <param name="KeySize">Default key size.</param>
            <param name="DigestAlgorithm">Default digest algorithm.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.#ctor(Goedel.Cryptography.Framework.RSAKeyPair)">
            <summary>
            Create an instance of the RSA crypto provider from an RSA Key Pair.
            </summary>
            <param name="RSAKeyPair">The RSA Key Pair</param>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.UDF">
            <summary>
            The key fingerprint.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.Generate(Goedel.Cryptography.KeySecurity,System.Int32)">
            <summary>
            Generate a new RSA Key Pair with the Key size specified when the 
            instance was created.
            </summary>
            <param name="KeySecurity">The key security level.</param>
            <param name="Size">The key size (2048 or 4096), if zero the default is used.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.FindLocal(System.String)">
            <summary>
            Locate the private key in the local key store.
            </summary>
            <param name="UDF">Fingerprint of key to locate.</param>
            <returns>True if key is found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.Sign(Goedel.Cryptography.CryptoDataSignature)">
            <summary>
            Sign the integrity value specified in the CryptoDataEncoder
            </summary>
            <param name="Data">Data to sign.</param>
        </member>
        <member name="M:Goedel.Cryptography.Framework.CryptoProviderSignatureRSA.Verify(Goedel.Cryptography.CryptoData,System.Byte[],Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Verify the signature value
            </summary>
            <param name="Bulk">The provider to wrap.</param>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The algorithm used.</param>
            <returns>True if the verification operation succeeded, otherwise false</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptographyFramework">
            <summary>
            Initialize the cryptographic framework
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographyFramework.Initialize(System.Boolean)">
            <summary>
            Perform initialization of the Goedel.Cryptography portable class
            with delegates to the .NET framework methods.
            </summary>
            <param name="TestMode">If true, the application will be initialized in
            test/debug mode.</param>
        </member>
        <member name="F:Goedel.Cryptography.CryptographyFramework.RNGCryptoServiceProvider">
            <summary>
            Cryptographic random number generator.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographyFramework.GetRandomBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill a byte array with cryptographically strong random data.
            </summary>
            <param name="Data">The array to fill with cryptographically strong random bytes.</param>
            <param name="Offset">The index of the array to start the fill operation.</param>
            <param name="Count">The number of bytes to fill</param>
        </member>
    </members>
</doc>
