<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc ipr="trust200902" docName="draft-hallambaker-udf-04" category="std">
<?rfc toc="yes"?>  
<?rfc symrefs="yes"?>  
<?rfc sortrefs="yes"?>  
<?rfc compact="yes"?>  
<?rfc subcompact="no"?>  
<front>
<title abbrev="Uniform Data Fingerprint (UDF)">Uniform Data Fingerprint (UDF)</title>
<author fullname="Phillip Hallam-Baker" initials="P. M." surname="Hallam-Baker">
<organization>Comodo Group Inc.</organization>
<address>
<email>philliph@comodo.com</email>
</address>
</author>
<date day="19" month="September" year="2016"/>
<area>sec</area>
<workgroup/>
<keyword>Cryptography</keyword>
<keyword>PKI</keyword>
<keyword>OpenPGP</keyword>
<abstract>
<t>This document describes means of generating Uniform Data Fingerprint (UDF) values and their presentation as text sequences and as URIs.</t>
<t>Cryptographic digests provide a means of uniquely identifying static data without the need for a registration authority. A fingerprint is a form of presenting a cryptographic digest that makes it suitable for use in applications where human readability is required. The UDF fingerprint format improves over existing formats through the introduction of a compact algorithm identifier affording an intentionally limited choice of digest algorithm and the inclusion of an IANA registered MIME Content-Type identifier within the scope of the digest input to allow the use of a single fingerprint format in multiple application domains.</t>
<t>Alternative means of rendering fingerprint values are considered including machine-readable codes, word and image lists. </t>
</abstract>
</front>
<middle>
<section title="Definitions" anchor="Section_1">
<t>Cryptographic Digest Function</t>
<t>Digest</t>
<t>Fingerprint</t>
<t>Hash</t>
<t>Presentation</t>
<t>Fingerprint Strengthening</t>
<t>Fingerprint Work Hardening</t>
<t>Work Factor</t>
<t>Content-Type</t>
<section title="Requirements Language" anchor="Section_1_1">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].</t>
</section>
</section>
<section title="Introduction" anchor="Section_2">
<t>The use of cryptographic digest functions to produce identifiers is well established as a means of generating a unique identifier for fixed data without the need for a registration authority.</t>
<t>While the use of fingerprints of public keys was popularized by PGP, they are employed in many other applications including OpenPGP, SSH, BitCoin and PKIX.</t>
<t>A cryptographic digest is a particular form of hash function that has the properties:</t>
<t>It is easy to compute the digest value for any given message</t>
<t>It is&nbsp;infeasible&nbsp;to generate a message from its digest value</t>
<t>It is infeasible to modify a message without changing the digest value</t>
<t>It is infeasible to find two different messages with the same digest value.</t>
<t>If these properties are met, the only way that two data objects that map to the same digest value is by random chance. If the number of possible digest values is sufficiently large (i.e. is a sufficiently large number of bits in length), this chance is reduced to an arbitrarily infinitesimal probability. Such values are described as being probabilistically unique.</t>
<t>A fingerprint is a representation of a cryptographic digest value optimized for purposes of verification and in some cases data entry. </t>
<section title="Algorithm Identifier" anchor="Section_2_1">
<t>Although a secure cryptographic digest algorithm has properties that make it ideal for certain types of identifier use, several cryptographic digest algorithms have found widespread use, some of which have been demonstrated to be insecure. </t>
<t>For example the MD5 message digest algorithm [RFC1321], was widely used in IETF protocols until it was demonstrated to be vulnerable to collision attacks [TBS].</t>
<t>The secure use of a fingerprint scheme therefore requires the digest algorithm to either be fixed or otherwise determined by the fingerprint value itself. Otherwise an attacker may be able to use a weak, broken digest algorithm to generate a data object matching a fingerprint value generated using a strong digest algorithm.</t>
</section>
<section title="Content Type Identifier" anchor="Section_2_2">
<t>A secure cryptographic digest algorithm provides a unique digest value that is probabilistically unique for a particular byte sequence but does not fix the context in which a byte sequence is interpreted. While such ambiguity may be tolerated in a fingerprint format designed for a single specific field of use, it is not acceptable in a general purpose format.</t>
<t>For example, the SSH and OpenPGP applications both make use of fingerprints as identifiers for the public keys used but using different digest algorithms and data formats for representing the public key data. While no such vulnerability has been demonstrated to date, it is certainly conceivable that a crafty attacker might construct an SSH key in such a fashion that OpenPGP interprets the data in an insecure fashion. If the number of applications making use of fingerprint format that permits such substitutions is sufficiently large, the probability of a semantic substitution vulnerability being possible becomes unacceptably large.</t>
<t>A simple control that defeats such attacks is to incorporate a content type identifier within the scope of the data input to the hash function.</t>
</section>
<section title="Representation" anchor="Section_2_3">
<t>The representation of a fingerprint is the format in which it is presented to either an application or the user.</t>
<t>Base32 encoding is used to produce the preferred text representation of a UDF fingerprint. This encoding uses only the letters of the Latin alphabet with numbers chosen to minimize the risk of ambiguity between numbers and letters (2, 3, 4, 5, 6 and 7).</t>
<t>To enhance readability and improve data entry, characters are grouped into groups of five.</t>
</section>
<section title="Truncation" anchor="Section_2_4">
<t>Different applications of fingerprints demand different tradeoffs between compactness of the representation and the number of significant bits. A larger the number of significant bits reduces the risk of collision but at a cost to convenience.</t>
<t>Modern cryptographic digest functions such as SHA-2 produce output values of at least 256 bits in length. This is considerably larger than most uses of fingerprints require and certainly greater than can be represented in human readable form on a business card.</t>
<t>Since a strong cryptographic digest function produces an output value in which every bit in the input value affects every bit in the output value with equal probability, it follows that truncating the digest value to produce a finger print is at least as strong as any other mechanism if digest algorithm used is strong.</t>
<t>Using truncation to reduce the precision of the digest function has the advantage that a lower precision fingerprint of some data content is always a prefix of a higher prefix of the same content. This allows higher precision fingerprints to be converted to a lower precision without the need for special tools.</t>
</section>
</section>
<section title="Encoding" anchor="Section_3">
<t>A UDF fingerprint for a given data object is generated by calculating the Binary Fingerprint Value for the given data object and type identifier, truncating it to obtain the desired degree of precision and then converting the truncated value to a representation.</t>
<section title="Binary Fingerprint Value" anchor="Section_3_1">
<t>The binary encoding of a fingerprint is calculated using the formula:</t>
<figure>
<artwork>
<![CDATA[Fingerprint = <<Version-ID> + H (<<Content-ID>  + ?:? + H(<<Data>))]]></artwork>
</figure>
<t>Where</t>
<figure>
<artwork>
<![CDATA[H(x) is the cryptographic digest function
<<Version-ID> is the fingerprint version and algorithm identifier.
<<Content-ID> is the MIME Content-Type of the data.
<<Data> is the binary data.]]></artwork>
</figure>
<t>The use of the nested hash function permits a fingerprint to be taken of data for which a digest value is already known without the need to calculate a new digest over the data.</t>
<t>The inclusion of a MIME content type prevents message substitution attacks in which one content type is substituted for another. </t>
<section title="Version ID" anchor="Section_3_1_1">
<t>Two digest algorithm identifiers are specified in this document:</t>
<t>SHA-2-512 = 96</t>
<t>SHA-3-512 = 144</t>
<t>These algorithm identifiers have been carefully chosen so that the first character in a SHA-2-512 fingerprint will always be 'M' and the first character in a SHA-3-512 fingerprint will always be 'S'. These provide mnemonics for 'Merkle-Damgard' and 'Sponge' respectively.</t>
</section>
</section>
<section title="Truncation" anchor="Section_3_2">
<t>The Binary Fingerprint Value is truncated to an integer multiple of 25 bits regardless of the intended output presentation.  </t>
<t>The output of the hash function is truncated to a sequence of n bits by first selecting the first n/8 bytes of the output function. If n is an integer multiple of 8, no additional bits are required and this is the result. Otherwise the remaining bits are taken from the most significant bits of the next byte and any unused bits set to 0.</t>
<t>For example, to truncate the byte sequence [a0, b1, c2, d3, e4] to 25 bits. 25/8 = 3 bytes with 1 bit remaining, the first three bytes of the truncated sequence is [a0, b1, c2] and the final byte is e4 AND 80 = 80 which we add to the previous result to obtain the final truncated sequence of [a0, b1, c2, 80]</t>
</section>
<section title="Base32 Representation" anchor="Section_3_3">
<t>A modified version of Base32 [RFC4648] encoding is used to present the fingerprint in text form grouping the output text into groups of five characters separated by a dash '-'. This representation improves the accuracy of both data entry and verification.</t>
</section>
<section title="URI Representation" anchor="Section_3_4">
<t>Any UDF fingerprint MAY be encoded as a URI by prefixing the Base32 text representation of the fingerprint with the string 'udf:'</t>
</section>
<section title="Examples" anchor="Section_3_5">
<t>In the following examples, &lt;Content-ID&gt; is the UTF8 encoding of the string "text/plain" and  is the UTF8 encoding of the string "UDF Data Value"</t>
<t>Data = 55 44 46 20 44 61 74 61 20 56 61 6c 75 65</t>
<section title="Using SHA-2-512 Digest" anchor="Section_3_5_1">
<figure>
<artwork>
<![CDATA[H( <Data> ) = 
    48 da 47 cc  ab fe a4 5c  76 61 d3 21  ba 34 3e 58
    10 87 2a 03  b4 02 9d ab  84 7c ce d2  22 b6 9c ab 
    02 38 d4 e9  1e 2f 6b 36  a0 9e ed 11  09 8a ea ac
    99 d9 e0 bd  ea 47 93 15  bd 7a e9 e1  2e ad c4 15
H(H( <Data> ) + Content-ID>) = 
    45 e0 59 e0  39 34 ea b7  f6 5d 83 b2  d8 f9 b1 6d 
    2a 6b 08 63  d9 3c c1 02  86 7b 83 49  f2 d9 f0 8f
    fe 07 87 30  c7 c9 05 74  ac a1 38 2b  b3 14 4d c6
    39 f9 8c 12  c0 4a 3e b5  05 0b 3e 67  df 52 4b 57
]]></artwork>
</figure>
<t>Text Presentation (100 bit)MB2GK-6DUF5-YGYYL-JNY5E</t>
<t>Text Presentation (125 bit)MB2GK-6DUF5-YGYYL-JNY5E-RWSHZ</t>
<t>Text Presentation (150bit)MB2GK-6DUF5-YGYYL-JNY5E-RWSHZ-SV75J</t>
<t>Text Presentation (250bit)MB2GK-6DUF5-YGYYL-JNY5E-RWSHZ-SV75J-C4OZQ-5GIN2-GQ7FQ-EEHFI</t>
</section>
<section title="Using SHA-3-512 Digest" anchor="Section_3_5_2">
<t>[This data intentionally omitted pending publication of the final SHA-3 standards document]</t>
</section>
</section>
<section title="Key Improvement" anchor="Section_3_6">
</section>
<section title="Work Hardening" anchor="Section_3_7">
</section>
</section>
<section title="Content Types" anchor="Section_4">
<section title="PKIX keyInfo" anchor="Section_4_1">
<t/>
</section>
<section title="OpenPGP Key" anchor="Section_4_2">
</section>
</section>
<section title="Additional UDF Renderings" anchor="Section_5">
<t>By default, a UDF fingerprint is rendered in the Base32 encoding described in this document. Additional renderings MAY be employed to facilitate entry and/or verification of fingerprint values.</t>
<section title="Machine Readable Rendering" anchor="Section_5_1">
<t>The use of a machine-readable rendering such as a QR Code allows a UDF value to be input directly using a smartphone or other device equipped with a camera. </t>
<t>A QR code fixed to a network capable device might contain the fingerprint of a machine readable description of the device.</t>
</section>
<section title="Word Lists" anchor="Section_5_2">
<t>The use of a Word List to encode fingerprint values was introduced by Patrick Juola and Philip Zimmerman for the PGPfone application. The PGP Word List is designed to facilitate exchange and verification of fingerprint values in a voice application. To minimize the risk of misinterpretation, two word lists of 256 values each are used to encode alternative fingerprint bytes. The compact size of the lists used allowed the compilers to curate them so as to maximize the phonetic distance of the words selected.</t>
<t>The PGP Word List is designed to achieve a balance between ease of entry and verification. Applications where only verification is required may be better served by a much larger word list, permitting shorter fingerprint encodings. </t>
<t>For example, a word list with 16384 entries permits 14 bits of the fingerprint to be encoded at once, 65536 entries permits 16. These encodings allow a 125 bit fingerprint to be encoded in 9 and 8 words respectively.</t>
</section>
<section title="Image List" anchor="Section_5_3">
<t>An image list is used in the same manner as a word list affording rapid visual verification of a fingerprint value. For obvious reasons, this approach is not generally suited to data entry.</t>
</section>
</section>
<section title="Security Considerations" anchor="Section_6">
<section title="Precision" anchor="Section_6_1">
</section>
<section title="Use of Truncated Digests" anchor="Section_6_2">
</section>
</section>
<section title="IANA Considerations" anchor="Section_7">
<t>[This will be extended later]</t>
<section title="URI Registration" anchor="Section_7_1">
<t>[Here a URI registration for the udf: scheme]</t>
</section>
<section title="Content Type Registration" anchor="Section_7_2">
<t>[PKIX KeyInfo]</t>
<t>[PGP Key Packet]</t>
</section>
<section title="Version Registry" anchor="Section_7_3">
<t>96 = SHA-2-512</t>
<t>144 = SHA-3-512</t>
</section>
</section>
</middle>
<back>
<references title="Normative References">
<reference anchor="RFC1321">
<front>
<title>The MD5 Message-Digest Algorithm</title>
<author fullname="R. Rivest" initials="R." surname="Rivest">
<organization/>
<address>
</address>
</author>
<date month="April" year="1992"/>
</front>
<seriesInfo name="RFC" value="1321"/>
<seriesInfo name="DOI" value="10.17487/RFC1321"/>
</reference>
<reference anchor="RFC4648">
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author fullname="S. Josefsson" initials="S." surname="Josefsson">
<organization/>
<address>
</address>
</author>
<date month="October" year="2006"/>
</front>
<seriesInfo name="RFC" value="4648"/>
<seriesInfo name="DOI" value="10.17487/RFC4648"/>
</reference>
</references>
</back>
</rfc>
