#using System.Text
#using Goedel.Recrypt
#using Goedel.Protocol
#pclass Goedel.Recrypt.Documentation ExampleGenerator

#method AdminExamples RecryptExamples Example

####Check service connection

It is often useful to be able to verify that a service is ready and willing
to perform transactions before attempting to perform one. Especially so
when the transaction requires considerable amounts of data and may require the 
use of specific server determined authentication options.

The request message is 'HelloRequest' and has no parameters:
#% var Point = Example.Traces.Get (Example.LabelHello);
#% Example.Traces.Level = 0;

#{Point.Messages[0].String()}

The response message specifies the protocol version(s) supported, the corresponding
encodings and bindings:


#{Point.Messages[1].String()}

####Create and populate a group

The first step in creating a recryption group is to create at least one
public key encryption keypair. 

Note that a recryption group should be specified as some form of Mesh 
profile. Whether this should be an application profile or a personal profile
is not yet clear. This part of the protocol is likely to change before
deployment.

Alice creates the recryption group and creates member entries for herself 
and Bob. [[TBS: Need to add profiles for Alice and Bob at some point.
This needs thought.]

The request message is 'CreateGroupRequest' and specifies the initial data to be used
to populate the group.
#% Point = Example.Traces.Get (Example.LabelCreate);
#% Example.Traces.Level = 1;

#{Point.Messages[0].String()}

The response message returns success or the reason for failure

#{Point.Messages[1].String()}


####Request Recyption

To test the new group, Alice encrypts a message under the group public key
and sends it to Bob. 

Bob receives the test message from Alice. To decrypt the message, Bob's client 
requests the corresponding partial recryption information from the key server.

The request message is 'RecryptDataRequest'. It specifies the Recipient data
from the encrypted message and Bob's recryption key identifier for that particular 
key service.
#% Point = Example.Traces.Get (Example.LabelRecrypt);

#{Point.Messages[0].String()}

If the request is successful, the response 'RecryptDataResponse' is 
returned containing the necessary partial decryption data and
user decryption entry



####Revoke Membership

Bob leaves the company and Alice revokes the access to the recryption group
that she granted earlier. Note that this will not stop Bob from reading material 
that he has already decrypted, it will only prevent him decrypting new material.
Nor will this prevent the use of the key material that was issued to Bob being 
used to decrypt messages should the key service be breached.

The request message is 'UpdateMemberRequest'. This specifies which 
member record in which group is to be updated and the new data to populate
the entry. 
#% Point = Example.Traces.Get (Example.LabelSuspend);

#{Point.Messages[0].String()}

The response message returns success or the reason for failure


#end method
#end pclass