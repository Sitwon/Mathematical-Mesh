using  System.Text;
using  Goedel.Mesh;
using  Goedel.Confirm;
using  Goedel.Protocol;
using  Goedel.Utilities;
using System;
using System.IO;
using System.Collections.Generic;
using Goedel.Registry;
namespace RunMeshApps {
	public partial class ExampleGenerator : global::Goedel.Registry.Script {

		

		//
		// MakeExamplesRecrypt
		//
		public void MakeExamplesRecrypt (MakeExamples MakeExamples) {
			 Traces = MakeExamples.RecryptPortal.Traces;
			 Traces.Level = 0;
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h1>Using Recryption\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("Use of recryption is essentially the same as the use of public key encryption with the\n{0}", _Indent);
			_Output.Write ("proviso that instead of one private key being sufficient to decrypt the message,\n{0}", _Indent);
			_Output.Write ("two are required. For the sake of convenience, these are refered to as the recryption\n{0}", _Indent);
			_Output.Write ("key (held by the key service) and the decryption key (held by the end user).\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h2>Creating a Recryption Group\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("A recryption group consists of \n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<ul>\n{0}", _Indent);
			_Output.Write ("<li>A public key pair for an encryption algorithm that supports\n{0}", _Indent);
			_Output.Write ("recryption\n{0}", _Indent);
			_Output.Write ("<li>An address in &<user>@&<domain> format that specifies the Key service and \n{0}", _Indent);
			_Output.Write ("user account.\n{0}", _Indent);
			_Output.Write ("<li>A set of user entries.\n{0}", _Indent);
			_Output.Write ("</ul>\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("To create a recryption group with the recryption tool, Alice enters:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			 var Point = Traces.Get (MakeExamples.RecryptCreateGroup);
			_Output.Write ("{1}\n{0}", _Indent, Point.Command);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("A recryption group is created and registered to the Key service. A new public key pair \n{0}", _Indent);
			_Output.Write ("is generated for the group.\n{0}", _Indent);
			_Output.Write ("The list of user\n{0}", _Indent);
			_Output.Write ("entries consists of an entry for Alice as the administrator of the group. Although\n{0}", _Indent);
			_Output.Write ("Alice has custody of the corresponding decryption key and can decrypt messages\n{0}", _Indent);
			_Output.Write ("without the use of the recryption service, she might not want to provision this key\n{0}", _Indent);
			_Output.Write ("to every one of her devices. So she creates a recryption user entry for herself.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The client requests creation of the recryption group at the key service. The request\n{0}", _Indent);
			_Output.Write ("is authenticated under an authentication key connected to Alice's account for use in \n{0}", _Indent);
			_Output.Write ("recryption:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, Point.Messages[0].String());
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The service authenticates the request, determines if Alice is authorized to create \n{0}", _Indent);
			_Output.Write ("new recryption groups and if these are satisfactory creates the group entry,\n{0}", _Indent);
			_Output.Write ("returns the result of the transaction:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, Point.Messages[1].String());
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h2>Encrypting files\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("At this point, anyone who knows the recryption key can start sending encrypted messages.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("To encrypt a test message, Bob enters:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			 Point = Traces.Get (MakeExamples.RecryptEncryptFile1);
			 Traces.Level = 1;
			_Output.Write ("{1}\n{0}", _Indent, Point.Command);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The plaintext file, <tt>file1.txt</tt> contains the following text.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, MakeExamples.PlaintextFileData);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The UTF representation of the text is:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, MakeExamples.ToHexString(MakeExamples.PlaintextFileData));
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The client feteches the encryption key from the service:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, Point.Messages[0].String());
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The service responds with the key:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, Point.Messages[1].String());
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The encryption key is used to encrypt the data:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, MakeExamples.CiphertextFileData);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("Here, an ephemeral key has been generated to encrypt the data against the public\n{0}", _Indent);
			_Output.Write ("group key. An ephemeral key MAY be used to establish a shared secret used to \n{0}", _Indent);
			_Output.Write ("encrypt multiple pieces of data.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h2>Adding users to a recryption group\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("Alice can add members to the group at any time. To add  Mallet, she uses the commands:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			 Point = Traces.Get (MakeExamples.RecryptAddMember2);
			_Output.Write ("{1}\n{0}", _Indent, Point.Command);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("This creates a recryption entry for Mallet which is pushed to the service:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{1}\n{0}", _Indent, Point.Messages[0].String());
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("Mallet can now decrypt the message Bob sent before he was added to the group.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h2>Decrypting files\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("To decrypt Bob's message, Mallet uses the command:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("~~~~\n{0}", _Indent);
			 Point = Traces.Get (MakeExamples.RecryptDecryptionSuccess);
			 Traces.Level = 1;
			_Output.Write ("{1}\n{0}", _Indent, Point.Command);
			_Output.Write ("~~~~\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The client reads the message and determines that it needs recryption data from\n{0}", _Indent);
			_Output.Write ("the key server example.com. It requests the necessary material.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{{Point.Messages[0].String()}}\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The key server checks to see that Mallet is authorized to read the message. If\n{0}", _Indent);
			_Output.Write ("the user entry for the group included additional constraints such as limiting\n{0}", _Indent);
			_Output.Write ("the number of documents Mallet could read in a day, these would also be checked.\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The Key server accepts the request and returns the response:\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("{{Point.Messages[1].String()}}\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("The client decrypts the recryption blob using Mallet's private key and uses the\n{0}", _Indent);
			_Output.Write ("decrypted key and the recryption data to complete the decryption of the data\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("<h2>Deleting a user\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			if (  (true.False()) ) {
				_Output.Write ("Alice discovers that Mallet is a mole working for an attacker. She removes Mallet\n{0}", _Indent);
				_Output.Write ("from the group:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("~~~~\n{0}", _Indent);
				 Point = Traces.Get (MakeExamples.RecryptDeleteMember);
				 Traces.Level = 1;
				_Output.Write ("{1}\n{0}", _Indent, Point.Command);
				_Output.Write ("~~~~\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("When Mallet attempts to decrypt file1.txt a second time, the Key server refuses:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{{Point.Messages[1].String()}}\n{0}", _Indent);
				}
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			}
		}
	}
